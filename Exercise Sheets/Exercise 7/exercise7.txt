------------------ Task 2 ------------------
Transform the following predicate to conjunctive normalform.
∀n : (n ∈ N ⇒ (∃m : m ∈ N ∧ m > n))   | remove implications
∀n : (n ∉ N ∨ (∃m : m ∈ N ∧ m > n))   | add skolem: f(n) := m (must be function, since m is dependent on m
∀n : (n ∉ N ∨ (f(n) ∈ N ∧ f(n) > n))  | distributive law
∀n : (n ∉ N ∨ f(n) ∈ N) ∧ (n ∉ N ∨ f(n) > n); f(n) := m
==> {{n ∉ N, f(n) ∈ N}, {n ∉ N, f(n) > n}}



------------------ Task 3 ------------------
Prove by contradiction that the following predicate is true:
(∀x : (¬P(x) ⇒ Q(x)) ∧ ∃x : ¬Q(x)) ⇒ ∃x : P(x)
Note that there are three different variables called x which are locally quantified.

Hint: Negate the formula, transform the formula to CNF (including Skolemization), find a
contradiction.

Negate + CNF:
¬((∀x : (¬P(x) ⇒ Q(x)) ∧ ∃x : ¬Q(x)) ⇒ ∃x : P(x)) | remove implications
¬(¬(∀x : (P(x) ∨ Q(x)) ∧ ∃x : ¬Q(x)) ∨ ∃x : P(x)) | simplify negations
(∀x : (P(x) ∨ Q(x)) ∧ ∃x : ¬Q(x)) ∧ ∀x : ¬P(x)    | rename variables
(∀x : (P(x) ∨ Q(x)) ∧ ∃y : ¬Q(y)) ∧ ∀z : ¬P(z)    | skolem/drop quantifiers: sy := y
((P(x) ∨ Q(x)) ∧ ¬Q(sy)) ∧ ¬P(z)

false if x = z = sy
((P(x) ∨ Q(x)) ∧ ¬P(x) ∧ ¬Q(x))

| P(X) | Q(X) | f                 |
| ---- | ---- | ----------------- |
| 0    | 0    | ((0 ∨ 0) ∧ 1 ∧ 1) |
| 0    | 1    | ((0 ∨ 1) ∧ 1 ∧ 0) |
| 1    | 0    | ((1 ∨ 0) ∧ 0 ∧ 1) |
| 1    | 1    | ((1 ∨ 1) ∧ 0 ∧ 0) |
all equal 0



------------------ Task 4 ------------------
Define the following statements in predicate logic:
1. For all humans it applies: If they lie in the sun for too long and don’t use sunscreen, they get
sunburn.
2. All children are humans.
3. Billy is a child.
4. Billy has been in the sun too long and doesn’t use sunscreen.

1. ∀X : human(X) ∧ sun_too_long(X) ∧ ¬used_sunscreen(X) ⇒ sunburn(X)
2. ∀X : child(X) ⇒ human(X)
3. child(billy)
4a. sun_too_long(billy)
4b. ¬used_sunscreen(billy)

Note: You can use abbreviations for the predicate names.
Prove by contradiction and resolution that Billy gets sunburn. Specify the most general unificator
for each resolution step

5. ¬sunburn(billy) (negated query)

6. := 2 ∧ 3 ⇒ human(billy)
mgu = {X/billy}

7. := 1 ∧ 5 ⇒ ¬human(billy) ∧ ¬sun_too_long(billy) ∧ used_sunscreen(billy)
mgu = {X/billy}

8. := 4a ∧ 7 ⇒ ¬human(billy) ∧ used_sunscreen(billy)
mgu = {}

9. := 4b ∧ 7 ⇒ ¬human(billy)
mgu = {}

10. := 6 ∧ 9 ⇒ 0
mgu = {}
